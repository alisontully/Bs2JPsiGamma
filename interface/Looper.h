/////////////////////////////////////                                           
//                                 //                                           
// Looper.h                        //                                           
// Author: Matthew Kenzie          //                                           
// Auto-generated                  //                                           
// Essentially a wrapper for TTree //                                           
//                                 //                                           
/////////////////////////////////////                                           
                                                                                
#ifndef Looper_h                                                                
#define Looper_h                                                                
                                                                                
#include <iostream>                                                             
#include <cassert>                                                              
#include "TChain.h"                                                             
#include "TTree.h"                                                              
#include "TBranch.h"                                                            
#include "TFile.h"                                                              
#include "TString.h"                                                            
                                                                                
#include "../interface/BranchDef.h"                                             
                                                                                
struct TreeContainer {                                                          
	TTree *tree;                                                                  
	TString name;                                                                 
	Long64_t nentries;                                                            
	int itype;                                                                    
	int sqrts;                                                                    
};                                                                              
                                                                                
class BranchDef; // just let Looper know that BranchDef exists                  
                                                                                
class Looper {                                                                  
                                                                                
	friend class BranchDef;                                                       
                                                                                
	public:                                                                       
                                                                                
		Looper(TTree *_outTree, BranchDef *_branchDefClass, TString _name="Looper");
		~Looper();                                                                  
                                                                                
		// functions                                                                
		void addTreeContainer(TTree *tree, TString _name, int _itype, int _sqrts);  
		void loadTree(int i);                                                       
		void setOutputBranches();                                                   
		inline void setFirstEntry(Long64_t ent) { firstEntry = ent; }               
		inline void setLastEntry(Long64_t ent) { lastEntry = ent; }                 
		Long64_t GetEntries() { return nentries; }                                  
		Int_t Fill() { return outTree->Fill(); }                                    
                                                                                
		// members                                                                  
		TTree *outTree;                                                             
		BranchDef *branchDefClass;                                                  
		TString name;                                                               
		int itype;                                                                  
		int sqrts;                                                                  
		Long64_t nentries;                                                          
		Long64_t nbytes;                                                            
		Long64_t firstEntry;                                                        
		Long64_t lastEntry;                                                         
		std::vector<TreeContainer> treeContainers;                                  
                                                                                
  	// branch variables
    Int_t           *B0_BKGCAT;                             
    Double_t        *B0_BPVVDZ;                             
    Double_t        *B0_Corrected_Mass;                     
    Double_t        *B0_DIRA_OWNPV;                         
    Double_t        *B0_ENDVERTEX_CHI2;                     
    Double_t        *B0_FD_CHI2;                            
    Bool_t          *B0_Hlt1DiMuonHighMassDecision_TOS;     
    Bool_t          *B0_Hlt1Global_TIS;                     
    Bool_t          *B0_Hlt1Global_TOS;                     
    Bool_t          *B0_Hlt1Phys_TOS;                       
    Bool_t          *B0_Hlt1SingleMuonHighPTDecision_TOS;   
    Bool_t          *B0_Hlt1TrackAllL0Decision_TOS;         
    Bool_t          *B0_Hlt1TrackMuonDecision_TOS;          
    Bool_t          *B0_Hlt1TrackPhotonDecision_TOS;        
    Bool_t          *B0_Hlt2DiMuonDetachedDecision_TOS;     
    Bool_t          *B0_Hlt2DiMuonDetachedHeavyDecision_TOS;
    Bool_t          *B0_Hlt2DiMuonDetachedJPsiDecision_TOS; 
    Bool_t          *B0_Hlt2Global_TIS;                     
    Bool_t          *B0_Hlt2Global_TOS;                     
    Bool_t          *B0_Hlt2RadiativeTopoPhotonDecision_TOS;
    Bool_t          *B0_Hlt2SingleMuonDecision_TOS;         
    Bool_t          *B0_Hlt2Topo2BodyBBDTDecision_TOS;      
    Bool_t          *B0_Hlt2Topo3BodyBBDTDecision_TOS;      
    Bool_t          *B0_Hlt2Topo4BodyBBDTDecision_TOS;      
    Bool_t          *B0_Hlt2TopoE2BodyBBDTDecision_TOS;     
    Bool_t          *B0_Hlt2TopoE3BodyBBDTDecision_TOS;     
    Bool_t          *B0_Hlt2TopoE4BodyBBDTDecision_TOS;     
    Bool_t          *B0_Hlt2TopoMu2BodyBBDTDecision_TOS;    
    Bool_t          *B0_Hlt2TopoMu3BodyBBDTDecision_TOS;    
    Double_t        *B0_ISOLATION_BDT1_highq2;              
    Double_t        *B0_ISOLATION_BDT2_highq2;              
    Double_t        *B0_ISOLATION_BDT3_highq2;              
    Double_t        *B0_ISOLATION_BDT4_highq2;              
    Bool_t          *B0_L0DiMuonDecision_TOS;               
    Bool_t          *B0_L0ElectronDecision_TOS;             
    Bool_t          *B0_L0Global_TIS;                       
    Bool_t          *B0_L0Global_TOS;                       
    Bool_t          *B0_L0HadronDecision_TOS;               
    Bool_t          *B0_L0MuonDecision_TOS;                 
    Double_t        *B0_M;                                  
    Int_t           *B0_MC_GD_GD_MOTHER_ID;                 
    Int_t           *B0_MC_GD_GD_MOTHER_KEY;                
    Int_t           *B0_MC_GD_MOTHER_ID;                    
    Int_t           *B0_MC_GD_MOTHER_KEY;                   
    Int_t           *B0_MC_MOTHER_ID;                       
    Int_t           *B0_MC_MOTHER_KEY;                      
    Double_t        *B0_MINIP;                              
    Double_t        *B0_MINIPCHI2;                          
    Double_t        *B0_MM;                                 
    Double_t        *B0_MMERR;                              
    Double_t        *B0_P;                                  
    Double_t        *B0_PE;                                 
    Double_t        *B0_PT;                                 
    Double_t        *B0_PX;                                 
    Double_t        *B0_PY;                                 
    Double_t        *B0_PZ;                                 
    Double_t        *B0_P_Parallel;                         
    Double_t        *B0_P_Perp;                             
    Double_t        *B0_TAU;                                
    Double_t        *B0_TRUEENDVERTEX_X;                    
    Double_t        *B0_TRUEENDVERTEX_Y;                    
    Double_t        *B0_TRUEENDVERTEX_Z;                    
    Int_t           *B0_TRUEID;                             
    Bool_t          *B0_TRUEISSTABLE;                       
    Double_t        *B0_TRUEORIGINVERTEX_X;                 
    Double_t        *B0_TRUEORIGINVERTEX_Y;                 
    Double_t        *B0_TRUEORIGINVERTEX_Z;                 
    Double_t        *B0_TRUEPT;                             
    Double_t        *B0_TRUEP_E;                            
    Double_t        *B0_TRUEP_X;                            
    Double_t        *B0_TRUEP_Y;                            
    Double_t        *B0_TRUEP_Z;                            
    Double_t        *B0_TRUETAU;                            
    Double_t        *B0_X_travelled;                        
    Double_t        *B0_Y_travelled;                        
    Double_t        *B0_Z_travelled;                        
    Int_t           *Jpsi_BKGCAT;                           
    Double_t        *Jpsi_CosTheta;                         
    Double_t        *Jpsi_ENDVERTEX_CHI2;                   
    Double_t        *Jpsi_M;                                
    Double_t        *Jpsi_MINIP;                            
    Double_t        *Jpsi_MINIPCHI2;                        
    Double_t        *Jpsi_MM;                               
    Double_t        *Jpsi_MMERR;                            
    Double_t        *Jpsi_P;                                
    Double_t        *Jpsi_PE;                               
    Double_t        *Jpsi_PT;                               
    Double_t        *Jpsi_PX;                               
    Double_t        *Jpsi_PY;                               
    Double_t        *Jpsi_PZ;                               
    Double_t        *Kplus_P;                               
    Double_t        *Kplus_PE;                              
    Double_t        *Kplus_PIDK;                            
    Double_t        *Kplus_PX;                              
    Double_t        *Kplus_PY;                              
    Double_t        *Kplus_PZ;                              
    Short_t         *Polarity;                              
    Float_t         *bdtoutput;                             
    Double_t        *eminus_CosTheta;                       
    Double_t        *eminus_M;                              
    Double_t        *eminus_MINIP;                          
    Double_t        *eminus_MINIPCHI2;                      
    Double_t        *eminus_P;                              
    Double_t        *eminus_PE;                             
    Double_t        *eminus_PT;                             
    Double_t        *eminus_PX;                             
    Double_t        *eminus_PY;                             
    Double_t        *eminus_PZ;                             
    Int_t           *eminus_TRACK_Type;                     
    Double_t        *eplus_CosTheta;                        
    Double_t        *eplus_M;                               
    Double_t        *eplus_MINIP;                           
    Double_t        *eplus_MINIPCHI2;                       
    Double_t        *eplus_P;                               
    Double_t        *eplus_PE;                              
    Double_t        *eplus_PT;                              
    Double_t        *eplus_PX;                              
    Double_t        *eplus_PY;                              
    Double_t        *eplus_PZ;                              
    Int_t           *eplus_TRACK_Type;                      
    ULong64_t       *eventNumber;                           
    Int_t           *gamgams_BKGCAT;                        
    Double_t        *gamgams_CosTheta;                      
    Double_t        *gamgams_DIRA_OWNPV;                    
    Double_t        *gamgams_ENDVERTEX_CHI2;                
    Double_t        *gamgams_FD_CHI2;                       
    Double_t        *gamgams_M;                             
    Int_t           *gamgams_MC_GD_GD_MOTHER_ID;            
    Int_t           *gamgams_MC_GD_GD_MOTHER_KEY;           
    Int_t           *gamgams_MC_GD_MOTHER_ID;               
    Int_t           *gamgams_MC_GD_MOTHER_KEY;              
    Int_t           *gamgams_MC_MOTHER_ID;                  
    Int_t           *gamgams_MC_MOTHER_KEY;                 
    Double_t        *gamgams_MINIP;                         
    Double_t        *gamgams_MINIPCHI2;                     
    Double_t        *gamgams_MM;                            
    Double_t        *gamgams_MMERR;                         
    Double_t        *gamgams_P;                             
    Double_t        *gamgams_PE;                            
    Double_t        *gamgams_PT;                            
    Double_t        *gamgams_PX;                            
    Double_t        *gamgams_PY;                            
    Double_t        *gamgams_PZ;                            
    Double_t        *gamgams_TAU;                           
    Double_t        *gamgams_X;                             
    Double_t        *gamgams_Y;                             
    Double_t        *gamgams_Z;                             
    Double_t        *muminus_CosTheta;                      
    Double_t        *muminus_M;                             
    Double_t        *muminus_MINIP;                         
    Double_t        *muminus_MINIPCHI2;                     
    Double_t        *muminus_P;                             
    Double_t        *muminus_PE;                            
    Double_t        *muminus_PT;                            
    Double_t        *muminus_PX;                            
    Double_t        *muminus_PY;                            
    Double_t        *muminus_PZ;                            
    Double_t        *muplus_CosTheta;                       
    Double_t        *muplus_M;                              
    Double_t        *muplus_MINIP;                          
    Double_t        *muplus_MINIPCHI2;                      
    Double_t        *muplus_P;                              
    Double_t        *muplus_PE;                             
    Double_t        *muplus_PT;                             
    Double_t        *muplus_PX;                             
    Double_t        *muplus_PY;                             
    Double_t        *muplus_PZ;                             
    Int_t           *nBackTracks;                           
    UInt_t          *nCandidate;                            
    Int_t           *nMuonCoordsS0;                         
    Int_t           *nMuonCoordsS1;                         
    Int_t           *nMuonCoordsS2;                         
    Int_t           *nMuonCoordsS3;                         
    Int_t           *nMuonCoordsS4;                         
    Int_t           *nMuonTracks;                           
    Int_t           *nPVs;                                  
    Bool_t          *pass_bdt;                              
    Double_t        *phi_mass;                              
    Double_t        *piminus_P;                             
    Double_t        *piminus_PE;                            
    Double_t        *piminus_PIDK;                          
    Double_t        *piminus_PX;                            
    Double_t        *piminus_PY;                            
    Double_t        *piminus_PZ;                            
    UInt_t          *runNumber;                             
    ULong64_t       *totCandidates;                         

 	// branch definitions
    TBranch *b_B0_BKGCAT;                              
    TBranch *b_B0_BPVVDZ;                              
    TBranch *b_B0_Corrected_Mass;                      
    TBranch *b_B0_DIRA_OWNPV;                          
    TBranch *b_B0_ENDVERTEX_CHI2;                      
    TBranch *b_B0_FD_CHI2;                             
    TBranch *b_B0_Hlt1DiMuonHighMassDecision_TOS;      
    TBranch *b_B0_Hlt1Global_TIS;                      
    TBranch *b_B0_Hlt1Global_TOS;                      
    TBranch *b_B0_Hlt1Phys_TOS;                        
    TBranch *b_B0_Hlt1SingleMuonHighPTDecision_TOS;    
    TBranch *b_B0_Hlt1TrackAllL0Decision_TOS;          
    TBranch *b_B0_Hlt1TrackMuonDecision_TOS;           
    TBranch *b_B0_Hlt1TrackPhotonDecision_TOS;         
    TBranch *b_B0_Hlt2DiMuonDetachedDecision_TOS;      
    TBranch *b_B0_Hlt2DiMuonDetachedHeavyDecision_TOS; 
    TBranch *b_B0_Hlt2DiMuonDetachedJPsiDecision_TOS;  
    TBranch *b_B0_Hlt2Global_TIS;                      
    TBranch *b_B0_Hlt2Global_TOS;                      
    TBranch *b_B0_Hlt2RadiativeTopoPhotonDecision_TOS; 
    TBranch *b_B0_Hlt2SingleMuonDecision_TOS;          
    TBranch *b_B0_Hlt2Topo2BodyBBDTDecision_TOS;       
    TBranch *b_B0_Hlt2Topo3BodyBBDTDecision_TOS;       
    TBranch *b_B0_Hlt2Topo4BodyBBDTDecision_TOS;       
    TBranch *b_B0_Hlt2TopoE2BodyBBDTDecision_TOS;      
    TBranch *b_B0_Hlt2TopoE3BodyBBDTDecision_TOS;      
    TBranch *b_B0_Hlt2TopoE4BodyBBDTDecision_TOS;      
    TBranch *b_B0_Hlt2TopoMu2BodyBBDTDecision_TOS;     
    TBranch *b_B0_Hlt2TopoMu3BodyBBDTDecision_TOS;     
    TBranch *b_B0_ISOLATION_BDT1_highq2;               
    TBranch *b_B0_ISOLATION_BDT2_highq2;               
    TBranch *b_B0_ISOLATION_BDT3_highq2;               
    TBranch *b_B0_ISOLATION_BDT4_highq2;               
    TBranch *b_B0_L0DiMuonDecision_TOS;                
    TBranch *b_B0_L0ElectronDecision_TOS;              
    TBranch *b_B0_L0Global_TIS;                        
    TBranch *b_B0_L0Global_TOS;                        
    TBranch *b_B0_L0HadronDecision_TOS;                
    TBranch *b_B0_L0MuonDecision_TOS;                  
    TBranch *b_B0_M;                                   
    TBranch *b_B0_MC_GD_GD_MOTHER_ID;                  
    TBranch *b_B0_MC_GD_GD_MOTHER_KEY;                 
    TBranch *b_B0_MC_GD_MOTHER_ID;                     
    TBranch *b_B0_MC_GD_MOTHER_KEY;                    
    TBranch *b_B0_MC_MOTHER_ID;                        
    TBranch *b_B0_MC_MOTHER_KEY;                       
    TBranch *b_B0_MINIP;                               
    TBranch *b_B0_MINIPCHI2;                           
    TBranch *b_B0_MM;                                  
    TBranch *b_B0_MMERR;                               
    TBranch *b_B0_P;                                   
    TBranch *b_B0_PE;                                  
    TBranch *b_B0_PT;                                  
    TBranch *b_B0_PX;                                  
    TBranch *b_B0_PY;                                  
    TBranch *b_B0_PZ;                                  
    TBranch *b_B0_P_Parallel;                          
    TBranch *b_B0_P_Perp;                              
    TBranch *b_B0_TAU;                                 
    TBranch *b_B0_TRUEENDVERTEX_X;                     
    TBranch *b_B0_TRUEENDVERTEX_Y;                     
    TBranch *b_B0_TRUEENDVERTEX_Z;                     
    TBranch *b_B0_TRUEID;                              
    TBranch *b_B0_TRUEISSTABLE;                        
    TBranch *b_B0_TRUEORIGINVERTEX_X;                  
    TBranch *b_B0_TRUEORIGINVERTEX_Y;                  
    TBranch *b_B0_TRUEORIGINVERTEX_Z;                  
    TBranch *b_B0_TRUEPT;                              
    TBranch *b_B0_TRUEP_E;                             
    TBranch *b_B0_TRUEP_X;                             
    TBranch *b_B0_TRUEP_Y;                             
    TBranch *b_B0_TRUEP_Z;                             
    TBranch *b_B0_TRUETAU;                             
    TBranch *b_B0_X_travelled;                         
    TBranch *b_B0_Y_travelled;                         
    TBranch *b_B0_Z_travelled;                         
    TBranch *b_Jpsi_BKGCAT;                            
    TBranch *b_Jpsi_CosTheta;                          
    TBranch *b_Jpsi_ENDVERTEX_CHI2;                    
    TBranch *b_Jpsi_M;                                 
    TBranch *b_Jpsi_MINIP;                             
    TBranch *b_Jpsi_MINIPCHI2;                         
    TBranch *b_Jpsi_MM;                                
    TBranch *b_Jpsi_MMERR;                             
    TBranch *b_Jpsi_P;                                 
    TBranch *b_Jpsi_PE;                                
    TBranch *b_Jpsi_PT;                                
    TBranch *b_Jpsi_PX;                                
    TBranch *b_Jpsi_PY;                                
    TBranch *b_Jpsi_PZ;                                
    TBranch *b_Kplus_P;                                
    TBranch *b_Kplus_PE;                               
    TBranch *b_Kplus_PIDK;                             
    TBranch *b_Kplus_PX;                               
    TBranch *b_Kplus_PY;                               
    TBranch *b_Kplus_PZ;                               
    TBranch *b_Polarity;                               
    TBranch *b_bdtoutput;                              
    TBranch *b_eminus_CosTheta;                        
    TBranch *b_eminus_M;                               
    TBranch *b_eminus_MINIP;                           
    TBranch *b_eminus_MINIPCHI2;                       
    TBranch *b_eminus_P;                               
    TBranch *b_eminus_PE;                              
    TBranch *b_eminus_PT;                              
    TBranch *b_eminus_PX;                              
    TBranch *b_eminus_PY;                              
    TBranch *b_eminus_PZ;                              
    TBranch *b_eminus_TRACK_Type;                      
    TBranch *b_eplus_CosTheta;                         
    TBranch *b_eplus_M;                                
    TBranch *b_eplus_MINIP;                            
    TBranch *b_eplus_MINIPCHI2;                        
    TBranch *b_eplus_P;                                
    TBranch *b_eplus_PE;                               
    TBranch *b_eplus_PT;                               
    TBranch *b_eplus_PX;                               
    TBranch *b_eplus_PY;                               
    TBranch *b_eplus_PZ;                               
    TBranch *b_eplus_TRACK_Type;                       
    TBranch *b_eventNumber;                            
    TBranch *b_gamgams_BKGCAT;                         
    TBranch *b_gamgams_CosTheta;                       
    TBranch *b_gamgams_DIRA_OWNPV;                     
    TBranch *b_gamgams_ENDVERTEX_CHI2;                 
    TBranch *b_gamgams_FD_CHI2;                        
    TBranch *b_gamgams_M;                              
    TBranch *b_gamgams_MC_GD_GD_MOTHER_ID;             
    TBranch *b_gamgams_MC_GD_GD_MOTHER_KEY;            
    TBranch *b_gamgams_MC_GD_MOTHER_ID;                
    TBranch *b_gamgams_MC_GD_MOTHER_KEY;               
    TBranch *b_gamgams_MC_MOTHER_ID;                   
    TBranch *b_gamgams_MC_MOTHER_KEY;                  
    TBranch *b_gamgams_MINIP;                          
    TBranch *b_gamgams_MINIPCHI2;                      
    TBranch *b_gamgams_MM;                             
    TBranch *b_gamgams_MMERR;                          
    TBranch *b_gamgams_P;                              
    TBranch *b_gamgams_PE;                             
    TBranch *b_gamgams_PT;                             
    TBranch *b_gamgams_PX;                             
    TBranch *b_gamgams_PY;                             
    TBranch *b_gamgams_PZ;                             
    TBranch *b_gamgams_TAU;                            
    TBranch *b_gamgams_X;                              
    TBranch *b_gamgams_Y;                              
    TBranch *b_gamgams_Z;                              
    TBranch *b_muminus_CosTheta;                       
    TBranch *b_muminus_M;                              
    TBranch *b_muminus_MINIP;                          
    TBranch *b_muminus_MINIPCHI2;                      
    TBranch *b_muminus_P;                              
    TBranch *b_muminus_PE;                             
    TBranch *b_muminus_PT;                             
    TBranch *b_muminus_PX;                             
    TBranch *b_muminus_PY;                             
    TBranch *b_muminus_PZ;                             
    TBranch *b_muplus_CosTheta;                        
    TBranch *b_muplus_M;                               
    TBranch *b_muplus_MINIP;                           
    TBranch *b_muplus_MINIPCHI2;                       
    TBranch *b_muplus_P;                               
    TBranch *b_muplus_PE;                              
    TBranch *b_muplus_PT;                              
    TBranch *b_muplus_PX;                              
    TBranch *b_muplus_PY;                              
    TBranch *b_muplus_PZ;                              
    TBranch *b_nBackTracks;                            
    TBranch *b_nCandidate;                             
    TBranch *b_nMuonCoordsS0;                          
    TBranch *b_nMuonCoordsS1;                          
    TBranch *b_nMuonCoordsS2;                          
    TBranch *b_nMuonCoordsS3;                          
    TBranch *b_nMuonCoordsS4;                          
    TBranch *b_nMuonTracks;                            
    TBranch *b_nPVs;                                   
    TBranch *b_pass_bdt;                               
    TBranch *b_phi_mass;                               
    TBranch *b_piminus_P;                              
    TBranch *b_piminus_PE;                             
    TBranch *b_piminus_PIDK;                           
    TBranch *b_piminus_PX;                             
    TBranch *b_piminus_PY;                             
    TBranch *b_piminus_PZ;                             
    TBranch *b_runNumber;                              
    TBranch *b_totCandidates;                          

};

#endif
